with extended dead logs
omega 0.5
predict: while VARIABLE_2 in VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_0 FUNCTION_CALL_8 index index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 index EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 FUNCTION_CALL_1 EMPTY_LIST index VARIABLE_1 = and VARIABLE_3 VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_6 VARIABLE_0 if VARIABLE_5 != EMPTY_LIST VARIABLE_2 FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while in VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST else VARIABLE_0 FUNCTION_CALL_4 VARIABLE_1 VARIABLE_0 FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return index VARIABLE_2 FUNCTION_CALL_13 VARIABLE_0 index VARIABLE_2 return NUMBER = index index VARIABLE_2 return VARIABLE_3 NUMBER ) / return NUMBER VARIABLE_1 VARIABLE_1 VARIABLE_1 FUNCTION_CALL_8 and VARIABLE_3 VARIABLE_0 FUNCTION_CALL_8 index VARIABLE_3 VARIABLE_2 = / NUMBER + NUMBER VARIABLE_3 VARIABLE_2
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index VARIABLE_1 if VARIABLE_2 FUNCTION_CALL_3 else VARIABLE_0 VARIABLE_2 < return VARIABLE_2 VARIABLE_4 = NUMBER
predict: return index VARIABLE_1 FUNCTION_CALL_2 return NUMBER - FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 VARIABLE_2 FUNCTION_CALL_5 VARIABLE_0 - NUMBER return VARIABLE_0 index VARIABLE_1 index NUMBER VARIABLE_2 . FUNCTION_CALL_5 VARIABLE_0 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return VARIABLE_2 VARIABLE_4 = VARIABLE_1 NUMBER VARIABLE_5 and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0
predict: while VARIABLE_4 <= FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2 VARIABLE_1 VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + NUMBER VARIABLE_5
predict: VARIABLE_1 + + VARIABLE_5 FUNCTION_CALL_5 VARIABLE_0 = VARIABLE_2 = VARIABLE_4 + NUMBER VARIABLE_4 VARIABLE_4 ( else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3
predict: index VARIABLE_2 else return if index VARIABLE_4 else VARIABLE_0 <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER index VARIABLE_4 + index VARIABLE_4 = VARIABLE_2 = VARIABLE_0 ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER VARIABLE_5 index + VARIABLE_3 VARIABLE_5 = FUNCTION_CALL_5 VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 VARIABLE_0
predict: if VARIABLE_3 index VARIABLE_5 < VARIABLE_2 VARIABLE_6 = VARIABLE_1 VARIABLE_7 VARIABLE_3 VARIABLE_5 VARIABLE_0 + NUMBER VARIABLE_5 index FUNCTION_CALL_11
predict: index VARIABLE_1 else return = index VARIABLE_7 index index index VARIABLE_2 index index VARIABLE_6 and VARIABLE_3 VARIABLE_0 + index VARIABLE_6 return NUMBER VARIABLE_2 + VARIABLE_7 NUMBER
predict: while VARIABLE_2
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_8 VARIABLE_7 = VARIABLE_5 VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_0 + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_0 index VARIABLE_3 VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 ) FUNCTION_CALL_4 VARIABLE_1 FUNCTION_CALL_5 VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 VARIABLE_2 ) VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 in NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 = FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_2 VARIABLE_0 index VARIABLE_2 * VARIABLE_1 index
predict: index VARIABLE_4 for VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 = VARIABLE_0 * VARIABLE_1 VARIABLE_2 VARIABLE_3
predict: return
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 FUNCTION_CALL_1 EMPTY_LIST VARIABLE_0
predict: return VARIABLE_3 for in index VARIABLE_1 VARIABLE_0 in index VARIABLE_4 VARIABLE_0 VARIABLE_2 <
predict: if VARIABLE_0 + VARIABLE_4 = VARIABLE_0 FUNCTION_CALL_2
predict: return VARIABLE_0
predict: index NUMBER VARIABLE_3 . >
predict: for VARIABLE_4 . NUMBER
predict: if VARIABLE_4 > VARIABLE_2 VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 > VARIABLE_1 FUNCTION_CALL_7 >= VARIABLE_2 VARIABLE_0
predict: return
Edit distance = 441
omega 1.0
predict: while VARIABLE_2 in VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_0 FUNCTION_CALL_8 index index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 index EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 FUNCTION_CALL_1 EMPTY_LIST index VARIABLE_1 = and VARIABLE_3 VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_6 VARIABLE_0 if VARIABLE_5 != EMPTY_LIST VARIABLE_2 FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while in VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST else VARIABLE_0 FUNCTION_CALL_4 VARIABLE_1 VARIABLE_0 FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return index VARIABLE_2 FUNCTION_CALL_13 VARIABLE_0 index VARIABLE_2 return NUMBER = index index VARIABLE_2 return VARIABLE_3 NUMBER ) / return NUMBER VARIABLE_1 VARIABLE_1 VARIABLE_1 FUNCTION_CALL_8 and VARIABLE_3 VARIABLE_0 FUNCTION_CALL_8 index VARIABLE_3 VARIABLE_2 = / NUMBER + NUMBER VARIABLE_3 VARIABLE_2
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index VARIABLE_1 if VARIABLE_2 FUNCTION_CALL_3 else VARIABLE_0 VARIABLE_2 < return VARIABLE_2 VARIABLE_4 = NUMBER
predict: return index VARIABLE_1 FUNCTION_CALL_2 return NUMBER - FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 VARIABLE_2 FUNCTION_CALL_5 VARIABLE_0 - NUMBER return VARIABLE_0 index VARIABLE_1 index NUMBER VARIABLE_2 . FUNCTION_CALL_5 VARIABLE_0 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return VARIABLE_2 VARIABLE_4 = VARIABLE_1 NUMBER VARIABLE_5 and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0
predict: while VARIABLE_4 <= FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2 VARIABLE_1 VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + NUMBER VARIABLE_5
predict: VARIABLE_1 + + VARIABLE_5 FUNCTION_CALL_5 VARIABLE_0 = VARIABLE_2 = VARIABLE_4 + NUMBER VARIABLE_4 VARIABLE_4 ( else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3
predict: index VARIABLE_2 else return if index VARIABLE_4 else VARIABLE_0 <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER index VARIABLE_4 + index VARIABLE_4 = VARIABLE_2 = VARIABLE_0 ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER VARIABLE_5 index + VARIABLE_3 VARIABLE_5 = FUNCTION_CALL_5 VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 VARIABLE_0
predict: if VARIABLE_3 index VARIABLE_5 < VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_3 index VARIABLE_5 VARIABLE_0 + NUMBER VARIABLE_5 FUNCTION_CALL_11 VARIABLE_6
predict: index VARIABLE_1 else return = index VARIABLE_7 index index index VARIABLE_2 index index VARIABLE_6 and VARIABLE_3 VARIABLE_0 + index VARIABLE_6 return NUMBER VARIABLE_2 + VARIABLE_7 NUMBER
predict: while VARIABLE_2
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_8 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_0 + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_0 VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 ) FUNCTION_CALL_4 VARIABLE_1 FUNCTION_CALL_5 VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 VARIABLE_2 ) VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 in NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 = FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_2 VARIABLE_0 index VARIABLE_2 * VARIABLE_1 index
predict: index VARIABLE_4 for VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 = VARIABLE_0 * VARIABLE_1 VARIABLE_3
predict: return
predict: VARIABLE_0
predict: for VARIABLE_1 index VARIABLE_4
predict: if VARIABLE_4 > VARIABLE_3 + VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 FUNCTION_CALL_1 EMPTY_LIST VARIABLE_0
predict: return VARIABLE_3 for in index VARIABLE_1 VARIABLE_0 in index VARIABLE_4 VARIABLE_0 VARIABLE_2 <
predict: if VARIABLE_0 + VARIABLE_4 = VARIABLE_0 FUNCTION_CALL_2
predict: return VARIABLE_0
predict: index NUMBER VARIABLE_3 . >
predict: for VARIABLE_4 . NUMBER
predict: if VARIABLE_4 > VARIABLE_2 VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 > VARIABLE_1 FUNCTION_CALL_7 >= VARIABLE_2 VARIABLE_0
predict: return
Edit distance = 442
omega 1.5
predict: while VARIABLE_2 in VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_0 FUNCTION_CALL_8 index index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 index EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 FUNCTION_CALL_1 EMPTY_LIST index VARIABLE_1 = and VARIABLE_3 VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_6 VARIABLE_0 if VARIABLE_5 != EMPTY_LIST VARIABLE_2 FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while in VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST else VARIABLE_0 FUNCTION_CALL_4 VARIABLE_1 VARIABLE_0 FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return index VARIABLE_2 FUNCTION_CALL_13 VARIABLE_0 index VARIABLE_2 return NUMBER = index index VARIABLE_2 return VARIABLE_3 NUMBER ) / return NUMBER VARIABLE_1 VARIABLE_1 VARIABLE_1 FUNCTION_CALL_8 and VARIABLE_3 VARIABLE_0 FUNCTION_CALL_8 index VARIABLE_3 VARIABLE_2 = / NUMBER + NUMBER VARIABLE_3 VARIABLE_2
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index VARIABLE_1 if VARIABLE_2 FUNCTION_CALL_3 else VARIABLE_0 VARIABLE_2 < return VARIABLE_2 VARIABLE_4 = NUMBER
predict: return index VARIABLE_1 FUNCTION_CALL_2 return NUMBER - FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 VARIABLE_2 FUNCTION_CALL_5 VARIABLE_0 - NUMBER return VARIABLE_0 index VARIABLE_1 index NUMBER VARIABLE_2 . FUNCTION_CALL_5 VARIABLE_0 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return VARIABLE_2 VARIABLE_4 = VARIABLE_1 NUMBER VARIABLE_5 and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0
predict: while VARIABLE_4 <= FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2 = VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + NUMBER VARIABLE_5
predict: if VARIABLE_5 = VARIABLE_1 + + FUNCTION_CALL_5 VARIABLE_0 = VARIABLE_2 = VARIABLE_4 + NUMBER VARIABLE_4 VARIABLE_5 VARIABLE_4 ( FUNCTION_CALL_7 VARIABLE_3 else
predict: index VARIABLE_2 else return if index VARIABLE_4 else VARIABLE_0 <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER index VARIABLE_4 + index VARIABLE_4 = VARIABLE_2 = VARIABLE_0 ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER VARIABLE_5 index + VARIABLE_3 VARIABLE_5 = FUNCTION_CALL_5 VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 VARIABLE_0
predict: if VARIABLE_3 index VARIABLE_5 < VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_3 index VARIABLE_5 VARIABLE_0 + NUMBER VARIABLE_5 FUNCTION_CALL_11 VARIABLE_6
predict: index VARIABLE_1 else return = index VARIABLE_7 index index index VARIABLE_2 index index VARIABLE_6 and VARIABLE_3 VARIABLE_0 + index VARIABLE_6 return NUMBER VARIABLE_2 + VARIABLE_7 NUMBER
predict: while VARIABLE_2
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_8 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 VARIABLE_0 + VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_0 + VARIABLE_6 VARIABLE_7 VARIABLE_6 VARIABLE_7 while VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 ) FUNCTION_CALL_4 VARIABLE_1 FUNCTION_CALL_5 VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 VARIABLE_2 ) VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 in NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 = FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1 index
predict: index VARIABLE_4 for VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 = VARIABLE_0 * VARIABLE_1 VARIABLE_3
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_1 index VARIABLE_4
predict: if VARIABLE_4 > VARIABLE_3 + VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 FUNCTION_CALL_1 EMPTY_LIST VARIABLE_0
predict: return VARIABLE_3 for in index VARIABLE_1 VARIABLE_0 in index VARIABLE_4 VARIABLE_0 VARIABLE_2 <
predict: if VARIABLE_0 + VARIABLE_4 = VARIABLE_0 FUNCTION_CALL_2
predict: return VARIABLE_0
predict: index NUMBER VARIABLE_3 . >
predict: for VARIABLE_4 . NUMBER
predict: if VARIABLE_4 > VARIABLE_2 VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 > VARIABLE_1 FUNCTION_CALL_7 >= VARIABLE_2 VARIABLE_0
predict: return VARIABLE_2
Edit distance = 439
omega 2.0
predict: while VARIABLE_2 in VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_0 FUNCTION_CALL_8 index index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 index EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 FUNCTION_CALL_1 EMPTY_LIST index VARIABLE_1 = and VARIABLE_3 VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_6 VARIABLE_0 if VARIABLE_5 != EMPTY_LIST VARIABLE_2 FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while in VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST else VARIABLE_0 FUNCTION_CALL_4 VARIABLE_1 VARIABLE_0 FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return index VARIABLE_2 FUNCTION_CALL_13 VARIABLE_0 index VARIABLE_2 return NUMBER = index index VARIABLE_2 return VARIABLE_3 NUMBER ) / return NUMBER VARIABLE_1 VARIABLE_1 VARIABLE_1 FUNCTION_CALL_8 and VARIABLE_3 VARIABLE_0 FUNCTION_CALL_8 index VARIABLE_3 VARIABLE_2 = / NUMBER + NUMBER VARIABLE_3 VARIABLE_2
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index VARIABLE_1 if VARIABLE_2 FUNCTION_CALL_3 else VARIABLE_0 VARIABLE_2 < return VARIABLE_2 VARIABLE_4 = NUMBER
predict: return index VARIABLE_1 FUNCTION_CALL_2 return NUMBER - FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 VARIABLE_2 FUNCTION_CALL_5 VARIABLE_0 - NUMBER return VARIABLE_0 index VARIABLE_1 index NUMBER VARIABLE_2 . FUNCTION_CALL_5 VARIABLE_0 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return VARIABLE_2 VARIABLE_4 = VARIABLE_1 NUMBER VARIABLE_5 and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 <= FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2 = VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + NUMBER VARIABLE_5
predict: if VARIABLE_5 = VARIABLE_1 + + FUNCTION_CALL_5 VARIABLE_0 = VARIABLE_2 = VARIABLE_4 + NUMBER VARIABLE_4 VARIABLE_5 VARIABLE_4 ( FUNCTION_CALL_7 VARIABLE_3 else
predict: index VARIABLE_2 else return if index VARIABLE_4 else VARIABLE_0 <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER index VARIABLE_4 + index VARIABLE_4 = VARIABLE_2 = VARIABLE_0 ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER VARIABLE_5 index + VARIABLE_3 VARIABLE_5 = FUNCTION_CALL_5 VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 VARIABLE_0
predict: if VARIABLE_3 index VARIABLE_5 < VARIABLE_2 index VARIABLE_0 VARIABLE_1 = VARIABLE_7 VARIABLE_3 index VARIABLE_5 VARIABLE_0 + NUMBER VARIABLE_5 FUNCTION_CALL_11
predict: index VARIABLE_1 else return = index VARIABLE_7 index index index VARIABLE_2 index index VARIABLE_6 and VARIABLE_3 VARIABLE_0 + index VARIABLE_6 return NUMBER VARIABLE_2 + VARIABLE_7 NUMBER
predict: while VARIABLE_2
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_8 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 VARIABLE_0 + VARIABLE_7 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_0 + VARIABLE_6 VARIABLE_7 while VARIABLE_5 VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 ) FUNCTION_CALL_4 VARIABLE_1 FUNCTION_CALL_5 VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 VARIABLE_2 ) VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 in FUNCTION_CALL_2 NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 = FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1 index
predict: index VARIABLE_4 for VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 = VARIABLE_0 * VARIABLE_1 VARIABLE_3
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_1 index VARIABLE_4
predict: if VARIABLE_4 > VARIABLE_3 + VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 FUNCTION_CALL_1 EMPTY_LIST VARIABLE_0
predict: return VARIABLE_3 for in index VARIABLE_1 VARIABLE_0 in index VARIABLE_4 VARIABLE_0 VARIABLE_2 <
predict: if VARIABLE_0 + VARIABLE_4 = VARIABLE_0 FUNCTION_CALL_2
predict: return VARIABLE_0
predict: index NUMBER VARIABLE_3 . >
predict: for VARIABLE_4 . NUMBER
predict: if VARIABLE_4 > VARIABLE_2 VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 > VARIABLE_1 FUNCTION_CALL_7 >= VARIABLE_2 VARIABLE_0
predict: return VARIABLE_2
Edit distance = 440
omega 2.5
predict: while VARIABLE_2 in VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_0 FUNCTION_CALL_8 index index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 index EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 FUNCTION_CALL_1 EMPTY_LIST index VARIABLE_1 = and VARIABLE_3 VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_6 VARIABLE_0 if VARIABLE_5 != EMPTY_LIST VARIABLE_2 FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while in VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST else VARIABLE_0 FUNCTION_CALL_4 VARIABLE_1 VARIABLE_0 FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return index VARIABLE_2 FUNCTION_CALL_13 VARIABLE_0 index VARIABLE_2 return NUMBER = index index VARIABLE_2 return VARIABLE_3 NUMBER ) / return NUMBER VARIABLE_1 VARIABLE_1 VARIABLE_1 FUNCTION_CALL_8 and VARIABLE_3 VARIABLE_0 FUNCTION_CALL_8 index VARIABLE_3 VARIABLE_2 = / NUMBER + NUMBER VARIABLE_3 VARIABLE_2
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index VARIABLE_1 if VARIABLE_2 FUNCTION_CALL_3 else VARIABLE_0 VARIABLE_2 < return VARIABLE_2 VARIABLE_4 = NUMBER
predict: return index VARIABLE_1 FUNCTION_CALL_2 return NUMBER - FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 VARIABLE_2 FUNCTION_CALL_5 VARIABLE_0 - NUMBER return VARIABLE_0 index VARIABLE_1 index NUMBER VARIABLE_2 . FUNCTION_CALL_5 VARIABLE_0 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return VARIABLE_2 VARIABLE_4 = VARIABLE_1 NUMBER VARIABLE_5 and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 <= FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2 = VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + NUMBER VARIABLE_5
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + = VARIABLE_2 + NUMBER VARIABLE_4 VARIABLE_4 FUNCTION_CALL_5 VARIABLE_0 = VARIABLE_5 ( VARIABLE_4
predict: index VARIABLE_2 else return if index VARIABLE_4 else VARIABLE_0 <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER index VARIABLE_4 + index VARIABLE_4 = VARIABLE_2 = VARIABLE_0 ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER VARIABLE_5 index + VARIABLE_3 VARIABLE_5 = FUNCTION_CALL_5 VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 VARIABLE_0
predict: if VARIABLE_3 index VARIABLE_5 < VARIABLE_2 index VARIABLE_0 VARIABLE_1 = VARIABLE_7 VARIABLE_3 index VARIABLE_5 VARIABLE_0 + NUMBER VARIABLE_5 FUNCTION_CALL_11
predict: index VARIABLE_1 else return = index VARIABLE_7 index index index VARIABLE_2 index index VARIABLE_6 and VARIABLE_3 VARIABLE_0 + index VARIABLE_6 return NUMBER VARIABLE_2 + VARIABLE_7 NUMBER
predict: while VARIABLE_2
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_8 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 VARIABLE_0 + VARIABLE_7 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_0 + VARIABLE_6 VARIABLE_7 while VARIABLE_5 VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 ) FUNCTION_CALL_4 VARIABLE_1 FUNCTION_CALL_5 VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 VARIABLE_2 ) VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 in FUNCTION_CALL_2 NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 = NUMBER VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1 FUNCTION_CALL_5
predict: index VARIABLE_4 for VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 = VARIABLE_0 * VARIABLE_1 VARIABLE_3
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_1 index VARIABLE_4
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 FUNCTION_CALL_1 EMPTY_LIST VARIABLE_0
predict: return VARIABLE_3 for in index VARIABLE_1 VARIABLE_0 in index VARIABLE_4 VARIABLE_0 VARIABLE_2 <
predict: if VARIABLE_0 + VARIABLE_4 = VARIABLE_0 FUNCTION_CALL_2
predict: return VARIABLE_0
predict: index NUMBER VARIABLE_3 . >
predict: for VARIABLE_4 . NUMBER
predict: if VARIABLE_4 > VARIABLE_2 VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 > VARIABLE_1 FUNCTION_CALL_7 >= VARIABLE_2 VARIABLE_0
predict: return VARIABLE_2
Edit distance = 431
