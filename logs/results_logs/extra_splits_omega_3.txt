split on more
omega 3.1
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 in VARIABLE_0 index VARIABLE_3 * VARIABLE_1 = VARIABLE_3
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 405
omega 3.2
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 in VARIABLE_0 index VARIABLE_3 * VARIABLE_1 = VARIABLE_3
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 405
omega 3.3
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 in VARIABLE_0 index VARIABLE_3 * VARIABLE_1 = VARIABLE_3
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 405
omega 3.4
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 index VARIABLE_3 in VARIABLE_0 VARIABLE_3 * VARIABLE_1
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 402
omega 3.6
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 index VARIABLE_3 in VARIABLE_0 VARIABLE_3 * VARIABLE_1
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 402
omega 3.7
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 index VARIABLE_3 in VARIABLE_0 VARIABLE_3 * VARIABLE_1
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 402
omega 3.8
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index == NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 index VARIABLE_3 in VARIABLE_0 VARIABLE_3 * VARIABLE_1
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 403
omega 3.9
predict: while index VARIABLE_2 VARIABLE_1 FUNCTION_CALL_4
predict: index VARIABLE_2 if VARIABLE_5 > VARIABLE_3 EMPTY_LIST FUNCTION_CALL_5 VARIABLE_2 < index VARIABLE_1 EMPTY_LIST FUNCTION_CALL_5 ) FUNCTION_CALL_8 in FUNCTION_CALL_4 index VARIABLE_2 EMPTY_LIST FUNCTION_CALL_5 in FUNCTION_CALL_4 EMPTY_LIST FUNCTION_CALL_8 VARIABLE_1 > EMPTY_LIST index VARIABLE_1 = VARIABLE_0 EMPTY_LIST index VARIABLE_1 index FUNCTION_CALL_8 ) . if VARIABLE_5 > VARIABLE_3 VARIABLE_1 . FUNCTION_CALL_8 VARIABLE_5 else . VARIABLE_2 in FUNCTION_CALL_2 NUMBER VARIABLE_0
predict: while for VARIABLE_0
predict: while index VARIABLE_2 EMPTY_LIST index in FUNCTION_CALL_4 ) FUNCTION_CALL_9 index FUNCTION_CALL_9 ) FUNCTION_CALL_4 EMPTY_LIST VARIABLE_1 - NUMBER
predict: if FUNCTION_CALL_5 VARIABLE_2 = NUMBER
predict: return VARIABLE_2
predict: index VARIABLE_2 FUNCTION_CALL_1 VARIABLE_0 return NUMBER = index VARIABLE_2 return VARIABLE_3 / return NUMBER FUNCTION_CALL_1 VARIABLE_1 index VARIABLE_1 FUNCTION_CALL_6 VARIABLE_3 = FUNCTION_CALL_6 VARIABLE_2 index VARIABLE_3 = / NUMBER + NUMBER VARIABLE_2 index VARIABLE_3
predict: return FUNCTION_CALL_7 VARIABLE_0 VARIABLE_1
predict: index if VARIABLE_5 > VARIABLE_3 FUNCTION_CALL_3 index VARIABLE_1 index VARIABLE_2 < in NUMBER )
predict: return VARIABLE_1 FUNCTION_CALL_2 / NUMBER VARIABLE_1 FUNCTION_CALL_3 VARIABLE_0
predict: return NUMBER - ) FUNCTION_CALL_3 VARIABLE_1 in VARIABLE_1 VARIABLE_1 return VARIABLE_0 NUMBER / NUMBER FUNCTION_CALL_5 ) - NUMBER return VARIABLE_0 VARIABLE_1 index == NUMBER / . FUNCTION_CALL_5
predict: index VARIABLE_1 FUNCTION_CALL_1 in NUMBER VARIABLE_5 == NUMBER and VARIABLE_4 VARIABLE_3 FUNCTION_CALL_7 VARIABLE_2 + FUNCTION_CALL_7 VARIABLE_0 index
predict: while VARIABLE_4 < FUNCTION_CALL_7 VARIABLE_2 or VARIABLE_5 < FUNCTION_CALL_7 VARIABLE_3
predict: if VARIABLE_4 = FUNCTION_CALL_7 VARIABLE_2
predict: VARIABLE_1 index VARIABLE_4 + VARIABLE_5 = VARIABLE_3 VARIABLE_5 + VARIABLE_5 NUMBER
predict: else if VARIABLE_5 = FUNCTION_CALL_7 VARIABLE_3 VARIABLE_1 + + VARIABLE_5 ) = NUMBER VARIABLE_2 VARIABLE_4 + NUMBER VARIABLE_4 = FUNCTION_CALL_5 VARIABLE_4
predict: index VARIABLE_4 else return if VARIABLE_2 index <= return VARIABLE_3 index VARIABLE_5 index VARIABLE_1 in FUNCTION_CALL_4 return NUMBER VARIABLE_4 + VARIABLE_4 = VARIABLE_2 = if ) VARIABLE_5 VARIABLE_4 +
predict: index VARIABLE_1 else return in FUNCTION_CALL_4 return NUMBER index VARIABLE_5 + VARIABLE_5 VARIABLE_3 = + VARIABLE_5 VARIABLE_4 +
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_3 VARIABLE_6 < FUNCTION_CALL_10 VARIABLE_2 )
predict: if VARIABLE_3 index VARIABLE_5 VARIABLE_2 index VARIABLE_6 = VARIABLE_1 VARIABLE_7 FUNCTION_CALL_11 VARIABLE_3 index VARIABLE_5 ) + VARIABLE_5 NUMBER
predict: else VARIABLE_1 = VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) VARIABLE_6 + NUMBER
predict: VARIABLE_7 + NUMBER
predict: while for
predict: while VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_9 VARIABLE_7 = VARIABLE_3 index VARIABLE_5 ) VARIABLE_5 < FUNCTION_CALL_10 VARIABLE_2 = VARIABLE_1 VARIABLE_7 VARIABLE_2 index VARIABLE_6 ) + VARIABLE_6 VARIABLE_7 VARIABLE_6 while VARIABLE_7 + VARIABLE_1
predict: return NUMBER FUNCTION_CALL_7 VARIABLE_1 VARIABLE_2 = VARIABLE_1 if FUNCTION_CALL_4 VARIABLE_2
predict: return VARIABLE_1
predict: return VARIABLE_0 else return return VARIABLE_2 VARIABLE_4 = FUNCTION_CALL_5 in FUNCTION_CALL_5 FUNCTION_CALL_4 VARIABLE_1 ) VARIABLE_2 / NUMBER
predict: return FUNCTION_CALL_6 VARIABLE_1 = VARIABLE_0 index VARIABLE_2 VARIABLE_0 + NUMBER FUNCTION_CALL_7
predict: for VARIABLE_2 = NUMBER FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: return VARIABLE_0
predict: for VARIABLE_2 in FUNCTION_CALL_5 VARIABLE_0 - NUMBER VARIABLE_0 index VARIABLE_2 = VARIABLE_0 index VARIABLE_2 * VARIABLE_1
predict: index in VARIABLE_4 VARIABLE_1 * VARIABLE_5 ) VARIABLE_6 in VARIABLE_2 = VARIABLE_1 . =
predict: return VARIABLE_0
predict: VARIABLE_2 = EMPTY_LIST VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0 VARIABLE_2 index VARIABLE_3 in VARIABLE_0 VARIABLE_3 * VARIABLE_1
predict: return VARIABLE_2
predict: VARIABLE_0
predict: for VARIABLE_4 VARIABLE_1
predict: if VARIABLE_4 > VARIABLE_3 + = VARIABLE_4 VARIABLE_0 return VARIABLE_0
predict: VARIABLE_0 ) = EMPTY_LIST
predict: return VARIABLE_3 for index index VARIABLE_1 ) EMPTY_LIST index VARIABLE_4 VARIABLE_2 <
predict: if + = VARIABLE_4 VARIABLE_0 ) FUNCTION_CALL_2
predict: return VARIABLE_0
predict: VARIABLE_0 . index VARIABLE_3
predict: for VARIABLE_4 .
predict: if VARIABLE_4 > VARIABLE_2 index VARIABLE_3 FUNCTION_CALL_6 VARIABLE_4
predict: return VARIABLE_3
predict: VARIABLE_2 = EMPTY_LIST
predict: for VARIABLE_3 = NUMBER FUNCTION_CALL_6 VARIABLE_0
predict: if VARIABLE_0 index VARIABLE_3 > VARIABLE_1
predict: VARIABLE_2 in FUNCTION_CALL_7 VARIABLE_0 index VARIABLE_3
predict: return VARIABLE_2
Edit distance = 404
